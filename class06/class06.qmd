---
title: "Class 06: R Functions"
author: "Jason (A15796973)"
format: html
---

#All about functions in R

Functions are the way we get stuff done in R. We call a function to red data, compute stuff, plot stuff, etc, etc.

R makes writing functions accessible but we should always start by trying to get a working snippet of code first before we write out function.

## Todays lab

We will grade a whole class of student assignments


```{r}
# Example input vectors to start with
student1 <- c(100, 100, 100, 100, 100, 100, 100, 90)
student2 <- c(100, NA, 90, 90, 90, 90, 97, 80)
student3 <- c(90, NA, NA, NA, NA, NA, NA, NA)
```

If we want the average we can use the 'mean()' function:

```{r}
mean(student1)
```

Lets be nice instructors and drop the lowest score so the answer here should be 100

I can use the 'min()' function to find the loest value

```{r}
min(student1)
```
I found the 'which.min()' function that may be useful here. How does it work? let's just try it.

```{r}
student1
which.min(student1)
```

I can use the minus syntax trick to get everything but the element with the min value
```{r}
student1[-which.min(student1)]
```


I have my first working snippet of code
```{r}
mean(student1[-which.min(student1)])
```
Let's test on the other students
```{r}
mean(student2[-which.min(student2)])

```

Where is the problem - oh it is the `mean()` with NA input returns NA by default
```{r}
mean(student2, na.rm=TRUE)
```

```{r}
student3
```


```{r}
mean(student3, na.rm=TRUE)

```

No bueno. We need to fix this

I want to stop working with `student`, `student2` etc. any typing it out every time so let instead work with an input called x

```{r}
x = student2
x
```

We want to overwrite the NA values with zero - if you miss a homework you score 0 n this homework.

Google and claude and ?NA told me about the `is.na()` function. Lets see how it work.

```{r}
x
is.na(x)
```

```{r}
x[is.na(x)]
```

We can use logicals to index a vector

```{r}
y = 1:5
y
y>3
y[y>3]
y[y>3]=100
```
```{r}
x[is.na(x)]=0
```


Working snippet of code that solves the problem for all example student inputs as a function.
```{r}
grade= function(x)
  #makes NA values 0
  {x[is.na(x)]=0
  #drops lowest score to find mean
mean(x[-which.min(x)])}
```

Q1. Write a function grade() to determine an overall grade from a vector of student homework
assignment scores dropping the lowest single score. If a student misses a homework (i.e. has an
NA value) this can be used as a score to be potentially dropped. Your final function should be
adquately explained with code comments and be able to work on an example class gradebook
such as this one in CSV format: “https://tinyurl.com/gradeinput” [3pts]

```{r}
grade= function(x)
  #makes NA values 0
  {x[is.na(x)]=0
  #drops lowest score to find mean
mean(x[-which.min(x)])}
```

Use this function:
```{r}
grade(student1)
grade(student2)
grade(student3)
```
We need to read the gradebook

```{r}
gradebook = read.csv("https://tinyurl.com/gradeinput", row.names=1)
gradebook
```

I can use the `apply()` function if I figure out how to use it
```{r}
ans = apply(gradebook, 1, grade)
ans
```

Q2. Using your grade() function and the supplied gradebook, Who is the top scoring student
overall in the gradebook? [3pts]
```{r}
which.max(ans)
```

Q3. From your analysis of the gradebook, which homework was toughest on students (i.e. obtained
the lowest scores overall? [2pts]

We could calculate the 'mean()' for score for each homework
```{r}
mask = gradebook
mask[is.na(mask)] = 0
hw.ave = (apply(mask,2,mean))
hw.ave
which.min(hw.ave)
```

Q4. Optional Extension: From your analysis of the gradebook, which homework was most
predictive of overall score (i.e. highest correlation with average grade score)? [1pt]

```{r}
apply(mask, 2, cor, y=ans)
which.max(apply(mask, 2, cor, y=ans))
```

